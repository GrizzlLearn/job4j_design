#### 1. Что такое SQL?

[2.3.1. Create Update Insert 0. Что такое база данных.](https://job4j.ru/profile/exercise/51/task-view/335)
[SQL wiki](https://ru.wikipedia.org/wiki/SQL)
[[0. Что такое база данных. (6860)#SQL]]

SQL - это декларативный язык программирования, который используется для создания, модификации и управления данными в реляционной БД, управляемой системой управления базами данных (СУБД). С помощью SQL-запросов можно добавлять, изменять, получать или удалять данные из БД.


---
---

#### 2. Что такое DML и DDL?

[2.3.1. Create Update Insert 0. Что такое база данных.](https://job4j.ru/profile/exercise/51/task-view/335)
[Учебник по языку SQL (DDL, DML) на примере диалекта MS SQL Server. Часть первая](https://habr.com/ru/post/255361/) (Раздел "О чем этот учебник")
[[0. Что такое база данных. (6860)#Операции]]

DDL – Data Definition Language, характеризует операции над структурой данных.
создании, удалении, изменении и т.д. таблиц и баз данных.

DML – Data Manipulation Language, представляет операции над самими данными.
создание, удаление, получение, обновление самих данных.

---
---
#### 3. Что такое первичный ключ?

[2.3.1. Create Update Insert 0.1. Связи между таблицами](https://job4j.ru/profile/exercise/51/task-view/336)
[Руководство по проектированию реляционных баз данных (4-6 часть из 15) [перевод]](https://habr.com/ru/post/193284/)
[PRIMARY KEY PostgreSQL](https://postgrespro.ru/docs/postgresql/15/ddl-constraints#DDL-CONSTRAINTS-PRIMARY-KEYS)
[[1. Связи между таблицами (373615)#БАЗА]]

`Первичный ключ` (primary key) - это поле в таблице, однозначно идентифицирующее каждую строку (запись) в таблице БД. Первичный ключ должен содержать уникальные значения. Также не может содержать null. В таблице может быть только один первичный ключ. Ключ может состоять из одного и более полей.

Так как в реляционных БД все таблицы почти всегда связаны друг с другом, первичные ключи используются для однозначной организации этой связи.

---
---
#### 4. Что такое внешний ключ?

[2.3.1. Create Update Insert 0.1. Связи между таблицами](https://job4j.ru/profile/exercise/51/task-view/336)
[Связи между таблицами базы данных](https://habr.com/ru/post/488054/) (Раздел "3.1. Как организовываются связи")
[FOREIGN KEY PostgreSQL](https://postgrespro.ru/docs/postgresql/15/tutorial-fk)
[[1. Связи между таблицами (373615)#many-to-one и one-to-many]]

Внешний ключ — это атрибут или набор атрибутов, которые ссылаются на primary key или unique другой таблицы. Другими словами, это что-то вроде указателя на строку другой таблицы.

---
---
#### 5. Какие виды связей между таблицами существуют и как они организуются?

[2.3.1. Create Update Insert 0.1. Связи между таблицами](https://job4j.ru/profile/exercise/51/task-view/336)
[Связи между таблицами базы данных](https://habr.com/ru/post/488054/)

1) [[1. Связи между таблицами (373615)#many-to-one и one-to-many]]

Множество записей в одной таблице может быть связано с одной записью в другой таблице.

2) [[1. Связи между таблицами (373615)#many-to-many]]

Связь между таблицами реализуется с помощью третьей таблицы, которая служит в качестве промежуточной связующей таблицы.
Для реализации связи многие ко многим нам нужен некий посредник между двумя рассматриваемыми таблицами. Он должен хранить два внешних ключа, первый из которых ссылается на первую таблицу, а второй — на вторую.

3) [[1. Связи между таблицами (373615)#one-to-one]]

Каждая запись в одной таблице соответствует только одной записи в другой таблице, и наоборот. Это означает, что между двумя таблицами существует уникальная пара записей, и нет дубликатов в связанных данных.

---
---
#### 6. Опишите как вставить, удалить, обновить данные в(из) таблицу(ы).

[2.3.1. Create Update Insert 0. Что такое база данных.](https://job4j.ru/profile/exercise/51/task-view/335)

[Памятка/шпаргалка по SQL](https://habr.com/ru/post/564390/) (Разделы "Команды SQL" и "Синтаксис SQL")
[INSERT PostgreSQL](https://postgrespro.ru/docs/postgresql/15/sql-insert)
[DELETE PostgreSQL](https://postgrespro.ru/docs/postgresql/15/sql-delete)
[UPDATE PostgreSQL](https://postgrespro.ru/docs/postgresql/15/sql-update?lang=ru)

1) INSERT [[0. Что такое база данных. (6860)#Вставка данных]]

```sql
insert into имя_таблицы(имя_атр1, имя_атрN) values(значение_атр1, значение_атрN);
```

2) UPDATE [[0. Что такое база данных. (6860)#Обновление данных]]

```sql
update имя_таблицы set имя_атр1 = зн_атр1, имя_атрN = зн_атрN;
```

3) DELETE [[0. Что такое база данных. (6860)#Удаление данных]]

```sql
delete from имя_таблицы;
```

---
---
#### 7. Что такое нормализация БД?

[2.3.4. Объекты Базы данных 7. Нормализация БД](https://job4j.ru/profile/exercise/179/task-view/819)
[Нормализация отношений. Шесть нормальных форм](https://habr.com/ru/post/254773/)

[[7. Нормализация БД (504822)#Первая нормальная форма]]

Отношение находится в 1НФ, если все его атрибуты являются простыми, все используемые домены должны содержать только скалярные значения. Не должно быть повторений строк в таблице

[[7. Нормализация БД (504822)#Вторая нормальная форма]]

2NF помогает улучшить организацию данных в базе данных, делая их более компактными, устраняя избыточность и снижая вероятность ошибок при обновлении.

[[7. Нормализация БД (504822)#Третья нормальная форма]]

ярким признаком нарушения 3НФ является бессмысленное дублирование одних и тех же данных в множестве строк таблицы (тогда атрибуты, значения которых бессмысленно дублируются, являются первыми кандидатами на перемещение в новое отдельное отношение).

[[7. Нормализация БД (504822)#Нормальная форма Бойса-Кодда]]

BCNF (Нормальная форма Бойса-Кодда) требует, чтобы в базе данных не было зависимостей между атрибутами, если они не зависят от ключа целиком. Ключевое условие BCNF: если есть функциональная зависимость X -> Y, то X должен быть ключом (первичным ключом).

---
---
#### 8. Что такое денормализация БД? Для чего она нужна?

[2.3.4. Объекты Базы данных 8. Денормализация БД](https://job4j.ru/profile/exercise/179/task-view/820)
[Зачем нужна денормализация баз данных, и когда ее использовать](https://habr.com/ru/company/latera/blog/281262/)

[[8. Денормализация БД (504823)]]

Денормализация базы данных (DB denormalization) - это процесс, в котором структура базы данных изменяется с целью увеличения производительности или упрощения работы с данными. Она противоположна нормализации, которая направлена на уменьшение избыточности данных и обеспечение целостности данных.

Денормализация может быть полезной в следующих случаях:

1. **Увеличение производительности**: Нормализация может привести к созданию множества связей между таблицами, что может замедлить выполнение запросов. Денормализация позволяет объединить данные в одной таблице, ускоряя доступ к ним.

2. **Уменьшение сложности запросов**: Нормализованные базы данных могут потребовать более сложных и долгих запросов для получения нужной информации. Денормализация может упростить запросы.

3. **Улучшение читаемости кода**: В некоторых случаях, особенно в приложениях, где скорость работы с данными критически важна, денормализированная структура базы данных может улучшить читаемость и производительность кода.

Однако следует быть осторожным с денормализацией, так как она может привести к избыточной информации, ухудшению целостности данных и усложнению обслуживания базы данных. Денормализация обычно применяется в тех случаях, когда производительность стоит выше приоритетом, и когда её выигрыши перевешивают её недостатки.

---
---
#### 9. Что такое кластерный и некластерный индексы?

[2.3.4. Объекты Базы данных 6. Индексы в SQL (кластерные и некластерные)](https://job4j.ru/profile/exercise/179/task-view/818)
[Кластерные и «обычные» индексы MySQL (InnoDB)](https://habr.com/ru/post/141767/) (Разделы "Кластерные индексы" и "Некластерные индексы")
[Индекс PostgreSQL](https://postgrespro.ru/docs/postgresql/15/indexes)

[[6. Индексы в SQL (кластерные и некластерные) (504821)]]

1. **Кластерный индекс (Clustered Index)**:

    - Кластерный индекс определяет физический порядок данных в таблице. Таблица может иметь только один кластерный индекс, так как данные в таблице фактически упорядочиваются по ключевым значениям этого индекса.
    - Кластерный индекс обычно используется для колонки или набора колонок, которые являются первичным ключом таблицы. Он оптимизирует операции выборки данных по значению первичного ключа, так как данные фактически хранятся в том же порядке, что и ключи.
    - Так как таблица может иметь только один кластерный индекс, выбор правильной колонки для него - важное решение в проектировании базы данных.
2. **Некластерный индекс (Non-clustered Index)**:

    - Некластерный индекс не определяет физический порядок данных в таблице. Вместо этого он создает отдельную структуру данных, которая содержит ссылки на строки таблицы и значения ключевых столбцов.
    - Таблица может иметь несколько некластерных индексов, и они могут использоваться для оптимизации разных типов запросов. Например, индекс можно создать для ускорения выборки данных по определенному столбцу или для оптимизации соединений между таблицами.
    - Некластерные индексы обычно занимают больше места, чем кластерные индексы, так как они хранят как значения ключей, так и ссылки на строки.

---
---
#### 10. Какие типы соединений (join) таблиц существуют? В чем их разница?

[2.3.2. Query 1. Inner join](https://job4j.ru/profile/exercise/52/task-view/339)
[2.3.3. Outer join 0. Join](https://job4j.ru/profile/exercise/53/task-view/342)
[Учебник по языку SQL (DDL, DML) на примере диалекта MS SQL Server. Часть четвертая](https://habr.com/ru/post/256045/) (Раздел "Join-соединения")
[JOIN PostgreSQL](https://postgrespro.ru/docs/postgresql/15/tutorial-join)
[SQL запросы быстро. Часть 1](https://habr.com/ru/post/480838/) (Раздел "Join")

1. **INNER JOIN**: Возвращает только те строки, где есть совпадения в обеих таблицах. Если запись в одной из таблиц не имеет соответствия в другой, она исключается из результата.

2. **LEFT JOIN (или LEFT OUTER JOIN)**: Возвращает все строки из левой (первой) таблицы и соответствующие строки из правой (второй) таблицы. Если запись в левой таблице не имеет соответствия в правой, то для этой записи в результате будет NULL.

3. **RIGHT JOIN (или RIGHT OUTER JOIN)**: Аналогично LEFT JOIN, но возвращает все строки из правой (второй) таблицы и соответствующие строки из левой (первой) таблицы. Если запись в правой таблице не имеет соответствия в левой, то для этой записи в результате будет NULL.

4. **FULL JOIN (или FULL OUTER JOIN)**: Возвращает все строки из обеих таблиц. Если запись в одной из таблиц не имеет соответствия в другой, то для этой записи в результате будут установлены NULL-значения.

5. **CROSS JOIN**: Возвращает декартово произведение двух таблиц, то есть каждая строка из первой таблицы объединяется со всеми строками из второй таблицы. Этот тип JOIN может привести к большому количеству результатов, и его следует использовать осторожно.

6. **SELF JOIN (самообъединение)**: Это JOIN, который используется для объединения таблицы с самой собой. Это полезно, когда в таблице есть связи между разными записями в ней.

7. **NON-EQUI JOIN (неравенство JOIN)**: Этот тип JOIN используется для объединения таблиц по условию, которое не является равенством (=), например, операторы сравнения (<, >, <=, >=).

---
---
#### 11. Что такое SQL курсор?

[2.3.4. Объекты Базы данных 5. Курсор в SQL](https://job4j.ru/profile/exercise/179/task-view/811)
[Курсоры в Mysql.](https://habr.com/ru/post/46333/)
[Курсор PostgreSQL](https://postgrespro.ru/docs/postgresql/15/plpgsql-cursors)

[[5. Курсор в SQL (504816)]]

2 определения:
1. **Курсор** – это объект, который позволяет отдельно обрабатывать строки из результирующего набора данных, который возвращается оператором SELECT. Строки при этом можно перебирать последовательно, с первой до последней.

2. **Курсор** – это область в памяти БД, которая предназначена для хранения последнего оператора SQL. Если текущий оператор – запрос к БД, то в памяти хранится и строка данных запроса. Она называется текущим значением или же – текущей строкой курсора. Данная область в памяти поименована и доступна нам для вызова.



---
---
#### 12. Опишите шаги по созданию и использованию курсора.

[2.3.4. Объекты Базы данных 5. Курсор в SQL](https://job4j.ru/profile/exercise/179/task-view/811)
[Курсоры в Mysql.](https://habr.com/ru/post/46333/)
[Курсор PostgreSQL](https://postgrespro.ru/docs/postgresql/15/plpgsql-cursors?lang=ru)

[[5. Курсор в SQL (504816)]]

Курсор можно объявить только внутри транзакции.

1. **Объявление курсора**: Сначала вы объявляете курсор с помощью оператора `DECLARE CURSOR`. В этом операторе вы определяете имя курсора и SQL-запрос, который будет использоваться для выборки данных. Например:

 ```sql
 DECLARE my_cursor CURSOR FOR
 SELECT column1, column2
 FROM my_table
 WHERE condition;
 ```

2. **Открытие курсора**: После объявления курсора вы открываете его с помощью оператора `OPEN`. Это позволяет выполнить запрос и начать выборку данных.

 ```sql
 OPEN my_cursor;
 ```

3. **Чтение данных**: Вы можете читать данные из курсора с помощью оператора `FETCH`. Этот оператор перемещает указатель на следующую строку результата запроса и возвращает данные этой строки. Выполняйте FETCH в цикле, чтобы читать все строки.

 ```sql
 FETCH NEXT FROM my_cursor INTO @variable1, @variable2;
 ```

 Здесь `@variable1` и `@variable2` - это переменные, в которые будут записаны данные из курсора.

4. **Обработка данных**: После чтения данных вы можете обрабатывать их, выполнять вычисления или сохранять в другие таблицы по вашей потребности.

5. **Закрытие курсора**: После того как вы закончили работу с курсором, закройте его с помощью оператора `CLOSE`.

 ```sql
 CLOSE my_cursor;
 ```

6. **Освобождение ресурсов**: Хорошей практикой является также освобождение ресурсов, связанных с курсором, с помощью оператора `DEALLOCATE`.

 ```sql
 DEALLOCATE my_cursor;
 ```


---
---
#### 13. Что такое транзакция?

[2.3.4. Объекты Базы данных 4.1. Транзакции. Общие сведения.](https://job4j.ru/profile/exercise/179/task-view/800)
[Что такое транзакция](https://habr.com/ru/post/537594/)
[Транзакция PostgreSQL](https://postgrespro.ru/docs/postgresql/15/tutorial-transactions?lang=ru)

[[4.1. Транзакции. Общие сведения. (504805)]]

это совокупность операций с БД, которые представляют собой логически неделимую единицу. При этом операции могут быть выполнены или целиком и успешно (должны быть соблюдены все правила консистентности БД и не зависит от параллельных транзакций), или же не выполнены вообще (при этом ни одна из операций, которые входят в совокупность, не должна внести изменения в БД).

- транзакция всегда или выполняется, или не выполняется целиком. Если возникают проблемы в транзакции клиента 1, то происходит отмена всех его изменений. При этом работа клиента 2 завершилась успешно и все изменения вступили в силу;

- транзакция может быть использована при восстановлении после сбоев и отказов. Если при работе клиента 1 возникли проблемы, то все изменения были отменены. При этом данные были приведены в состояние, в котором были до начала операций клиента 1;

- транзакция обеспечивает механизм конкурентного доступа к данным, так как СУБД запретила двум клиентам одновременно изменять один и тот же счет.

типы изоляции:

1. **READ UNCOMMITTED (Чтение неподтвержденных данных)**:

- Транзакции могут видеть изменения, внесенные другими транзакциями, даже если они еще не были подтверждены (COMMIT).
- Этот уровень изоляции обеспечивает самую низкую степень изоляции и может приводить к чтению "грязных данных" (неподтвержденных изменений).
2. **READ COMMITTED (Чтение подтвержденных данных)**:

- Транзакции видят только изменения, которые были подтверждены (COMMIT) другими транзакциями.
- Этот уровень изоляции решает проблему "грязных данных", но может вызвать проблему чтения "неповторяющихся данных" (non-repeatable reads).
3. **REPEATABLE READ (Повторяемое чтение)**:

- Транзакции видят только данные, считанные в начале транзакции, и эти данные остаются постоянными в течение всей транзакции.
- Этот уровень изоляции решает проблему чтения "неповторяющихся данных", но может вызвать проблему чтения "фантомных данных" (phantom reads).
4. **SERIALIZABLE (Сериализуемая)**:

- Этот уровень изоляции предоставляет самую высокую степень изоляции.
- Транзакции видят только данные, которые были подтверждены другими транзакциями, и предотвращают как чтение "грязных данных", так и чтение "неповторяющихся данных" и "фантомных данных".
- Однако он может привести к блокировкам и ухудшению производительности.

---
---
#### 14. Что такое триггер? Какие типы триггеров Вы знаете?

[2.3.4. Объекты Базы данных 2. Триггеры](https://job4j.ru/profile/exercise/179/task-view/798)
[TRIGGER PostgreSQL](https://www.postgresql.org/docs/current/sql-createtrigger.html)

[[2. Триггеры (504803)]]

Триггер – специальный объект БД, описывающий перечень действий, которые необходимо автоматически выполнить при наступлении указанного события.

триггеры можно поделить на три группы с точки зрения события:

1. BEFORE (до выполнения операции);

2. INSTEAD OF (вместо выполнения операции);

3. AFTER (после выполнения операции).

---
---
#### 15. В чем разница между where и having?

[2.3.2. Query 0. Select](https://job4j.ru/profile/exercise/52/task-view/338)
[2.3.2. Query 2. Группировка и агрегатные функции](https://job4j.ru/profile/exercise/52/task-view/340)
[WHERE PostgreSQL](https://postgrespro.ru/docs/postgresql/15/queries-table-expressions#QUERIES-WHERE)
[HAVING PostgreSQL](https://postgrespro.ru/docs/postgresql/15/queries-table-expressions#QUERIES-GROUP)
[SQL запросы быстро. Часть 1](https://habr.com/ru/post/480838/) (Разделы "Where" и "Having")

[[0. Select (6861)]]
[[2. Группировка и агрегатные функции (373618)]]

WHERE — элемент запроса, который используется, когда нужно отфильтровать данные по нужному условию.

```sql
select * from Customers WHERE City = 'London'
```

HAVING - элемент запроса, gрименяется он аналогично where, только в нем обязательно должна быть агрегатная функция.

```sql
SELECT department, AVG(salary) as avg_salary
FROM employees
GROUP BY department
HAVING AVG(salary) > 60000;
```

---
---
#### 16. Что такое подзапрос (sub-query)?

[Как думать на SQL?](https://habr.com/ru/post/305926/) (Раздел "Подзапросы")
[Подзапросы PostgreSQL](https://postgrespro.ru/docs/postgresql/15/queries-table-expressions#queries-subqueries) (Раздел "7.2.1.3 Подзапросы")
[Скалярные подзапросы PostgreSQL](https://postgrespro.ru/docs/postgresql/15/sql-expressions#SQL-SYNTAX-SCALAR-SUBQUERIES)
[Выражения подзапросов PostgreSQL](https://postgrespro.ru/docs/postgresql/15/functions-subquery)

Подзапросы это обычные SQL-запросы, встроенные в более крупные запросы.

```sql
выражение оператор (подзапрос)
```


---
---
#### 17. Что такое union?

[UNION PostgreSQL](https://www.postgresql.org/docs/current/queries-union.html)

`UNION` - это оператор в SQL, который используется для объединения результатов двух или более запросов в один результирующий набор данных. Оператор `UNION` позволяет объединить строки из разных таблиц или результатов запросов таким образом, что дубликаты удаляются, и только уникальные строки включаются в итоговый результат.

`UNION` - это оператор в SQL, который используется для объединения результатов двух или более запросов в один результирующий набор данных. Оператор `UNION` позволяет объединить строки из разных таблиц или результатов запросов таким образом, что дубликаты удаляются, и только уникальные строки включаются в итоговый результат.

Основные характеристики оператора `UNION`:

1. **Объединение по столбцам**: Результаты запросов, объединяемых с помощью `UNION`, должны иметь одинаковое количество столбцов и соответствующие столбцы должны иметь совместимые типы данных.

2. **Удаление дубликатов**: По умолчанию оператор `UNION` удаляет дубликаты строк из итогового результата. Если вы хотите включить дубликаты, вы можете использовать оператор `UNION ALL`.

```sql
-- Получение списка работников
SELECT employee_id, first_name, last_name
FROM employees
WHERE department = 'HR'

UNION

-- Получение списка подрядчиков
SELECT contractor_id, first_name, last_name
FROM contractors
WHERE project = 'Marketing';
```

---
---
#### 18. Что такое group by?

[2.3.2. Query 2. Группировка и агрегатные функции](https://job4j.ru/profile/exercise/52/task-view/340)
[SQL запросы быстро. Часть 1](https://habr.com/ru/post/480838/) (Раздел "Group by")
[GROUP BY PostgreSQL](https://postgrespro.ru/docs/postgresql/15/queries-table-expressions#QUERIES-GROUP)

[[2. Группировка и агрегатные функции (373618)]]

Оператор `GROUP BY` используется в SQL для группировки строк в результирующем наборе данных на основе значений одного или нескольких столбцов. Это позволяет выполнять агрегатные функции (например, суммирование, подсчет, нахождение среднего значения) над данными в каждой группе.

```sql
SELECT column1, column2, aggregate_function(column3)
FROM table_name
GROUP BY column1, column2;
```

---
---
#### 19. Что такое хранимые процедуры?

[2.3.4. Объекты Базы данных 3. Хранимые процедуры и функции](https://job4j.ru/profile/exercise/179/task-view/799)
[Хранимые процедуры PostgreSQL](https://postgrespro.ru/docs/postgresql/15/sql-createprocedure)

[[3. Хранимые процедуры и функции (504804)]]

это подпрограмма (она может принимать параметры), которая предназначена выполнять ряд операций с данными и структурами БД. Хранится на стороне БД и доступна как для вызова из других процедур и триггеров, а также может исполняться самостоятельно.

```sql
CREATE PROCEDURE insert_data(a integer, b integer)
LANGUAGE SQL
AS $$
INSERT INTO tbl VALUES (a);
INSERT INTO tbl VALUES (b);
$$;
```

---
---
#### 20. Что такое view (Представление)?

[2.3.4. Объекты Базы данных 1. Представления](https://job4j.ru/profile/exercise/179/task-view/787)
[Представления (VIEW) в MySQL](https://habr.com/ru/post/47031/)
[Представления PostgreSQL](https://postgrespro.ru/docs/postgresql/15/tutorial-views)

[[1. Представления (504792)]]

Представления (views) - это SQL-запрос, который можно выполнять, обращаясь к нему по заранее указанному имени.

Материализованное представление - это SQL-запрос, который можно выполнять, обращаясь к нему по заранее указанному имени, и результат выполнения этого запроса сохраняется для дальнейшего использования.

Основой для построения представления может быть только SELECT-запрос

**Преимущества:**

1. Упрощение выполнения запросов. Как мы уже обсудили, представление может быть построено на SQL-запросе любой сложности. Поэтому при использовании представлений нам уже не придется переписывать запрос, который может состоять даже из 100 строк. Нам будет достаточно вызвать представление **SELECT * FROM представление** и в итоге получить тот же результат;

2. Возможность построения простого и надежного API. На стадии проектирования БД мы можем предусмотреть набор удобных представлений, т.е. мы можем заранее скрыть от разработчика сложные запросы, что, в свою очередь, упростит разработку приложения и к тому же снизит количество ошибок при разработке.

3. Упрощение бизнес-логики. В принципе, это следует из предыдущего пункта. Однако даже если мы не строим полноценный API, мы все равно можем заранее сформировать набор для наиболее сложных и часто встречаемых запросов.

4. Минимум накладных расходов. Представление (это касается простых представлений) практически не занимает места в БД, потому даже создание сотен и тысяч представлений не приводит к ощутимому увеличению размера БД.

5. Безопасность. Представления являются объектами БД, потому к ним применимы все механизмы СУБД по контролю прав доступа.

**Недостатки:**

1. Избыточность. Иногда представления просто не нужны. Например, БД небольшая, бизнес-логика простая, модель безопасности тривиальная. В таком случае представления чаще всего будут лишними.

2. Дополнительный код. Представления, как и все остальное, необходимо создавать, что ведет за собой остальные операции – тестирование, корректировка при изменении БД или бизнес-логики. Соответственно, растут трудозатраты и повышается вероятность появления ошибок.

3. Ограниченность возможностей. Мы уже говорили, что представления можно использовать для модификации данных. Однако это имеет много ограничений, поэтому можно утверждать, что не любую операцию с БД можно выполнить с помощью представлений.


---
---
#### 21. Что такое JDBC?

[2.3.5. JDBC 0. JDBC](https://job4j.ru/profile/exercise/55/task-view/344)
[Простой пример JDBC для начинающих](https://habr.com/ru/post/326614/)
[Документация JDBC Введение](https://docs.oracle.com/javase/tutorial/jdbc/overview/index.html)

[[0. JDBC (6863)]]

JDBC. _JDBC_ – это API, т.е. набор вспомогательных классов, которое позволяет работать с базами данных. Причем JDBC предоставляет единый интерфейс для работы с ними, ведь бывают различные базы данных.

---
---
#### 22. Что нужно для работы с той или иной БД?

[2.3.5. JDBC 0. JDBC](https://job4j.ru/profile/exercise/55/task-view/344)
[[0. JDBC (6863)]]

Нужен драйвер, а так же:
 1) добавить необходимый драйвер в pom.xml в `dependency`
 2) подключиться к БД

---
---
#### 23. Как зарегистрировать драйвер?

[2.3.5. JDBC 0. JDBC](https://job4j.ru/profile/exercise/55/task-view/344)

```java
Class.forName(cfg.getProperty("jdbc.driver"));
```

---
---
#### 24. Как получить Connection?

[2.3.5. JDBC 0. JDBC](https://job4j.ru/profile/exercise/55/task-view/344)

```java
Connection cnn = DriverManager.getConnection(
    cfg.getProperty("url"),
    cfg.getProperty("username"),
    cfg.getProperty("password")
);
```

---
---
#### 25.Что такое Statement, PreparedStatement? В чем разница между ними?

[2.3.5. JDBC 0.1. Statement](https://job4j.ru/profile/exercise/55/task-view/345)
[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346
[Пакетная обработка в JDBC и HIBERNATE](https://habr.com/ru/post/501756/) (Разделы "Интерфейс Statement" и "Интерфейс PreparedStatement")
[Документация Statement](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Statement.html)
[Документация PreparedStatement](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/PreparedStatement.html)

[[Statement]]
[[PreparedStatement]]

`Statement` - это интерфейс в Java, который используется для выполнения SQL-запросов к базе данных.

`PreparedStatement` - это интерфейс в Java, предоставляющий способ выполнять предварительно скомпилированные SQL-запросы с параметрами. Он представляет собой механизм, который помогает защитить ваш код от SQL-инъекций и может улучшить производительность, так как база данных может повторно использовать предварительно скомпилированный запрос.

PreparedStatement поддерживает параметризированные запросы, позволяет избежать SQL-инъекций

---
---
#### 26. Что такое ResultSet?

[2.3.5. JDBC 0.1. Statement](https://job4j.ru/profile/exercise/55/task-view/345)
[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346)
[Документация ResultSet](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/ResultSet.html)

[[projects/01 - Java/Интерфейсы/ResultSet|ResultSet]]

`ResultSet` - это интерфейс в Java, который представляет собой результат выполнения SQL-запроса к базе данных. Он используется для хранения и обработки набора результатов, полученных из базы данных после выполнения SQL-запроса SELECT. `ResultSet` представляет собой таблицу данных с результатами запроса, и он позволяет вам извлекать, перебирать и манипулировать данными, полученными из базы данных.

---
---
#### 27. В чем разница между методами execute, executeUpdate, executeQuery?

[2.3.5. JDBC 0.1. Statement](https://job4j.ru/profile/exercise/55/task-view/345)
[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346)
[Документация Statement](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/Statement.html#method-summary) (содержит все 3 метода)
[Документация PreparedStatement](https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/PreparedStatement.html#method-summary) (содержит все 3 метода)

1. **execute()**:
    - Этот метод может использоваться для выполнения любого SQL-запроса, включая SELECT, INSERT, UPDATE, DELETE и другие.
    - Возвращает `true`, если был получен результат, который представляет собой `ResultSet`, и `false`, если результатом является обновление (как INSERT, UPDATE, DELETE) или нет результата вовсе.
    - Позволяет выполнять любые типы SQL-запросов, но требует более сложного кода для обработки результата.

2. **executeUpdate()**:
    - Этот метод предназначен для выполнения SQL-команд, которые изменяют данные в базе данных, такие как INSERT, UPDATE и DELETE.
    - Возвращает количество строк, затронутых выполненной командой. Если команда не изменяет данные (например, SELECT), метод возвращает 0.
    - Чаще всего используется при выполнении SQL-команд для вставки, обновления и удаления данных.

3. **executeQuery()**:
    - Этот метод используется исключительно для выполнения SQL-запросов SELECT, которые возвращают набор результатов (ResultSet).
    - Возвращает `ResultSet`, который представляет собой результаты запроса, и который можно использовать для извлечения данных из базы данных.


Разница между этими методами заключается в типах выполняемых операций и типах возвращаемых результатов. `execute()` может использоваться для всех видов операций, `executeUpdate()` для изменения данных, а `executeQuery()` исключительно для выполнения SELECT-запросов.

---
---
#### 28. Можно ли использовать возвращаемое значение execute() для проверки, что что-то обновилось?

[2.3.5. JDBC 0.1. Statement](https://job4j.ru/profile/exercise/55/task-view/345)
[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346)

Не совсем понимаю что именно является ответом:
1) использовать напрямую нельзя, т.к. при обновлении возвращяет `false` и всё.
2) не напрямую - можно, т.к. можно вызвать `st.getUpdateCount()`
```java
st.execute(sql);
int count = st.getUpdateCount();
```

---
---
#### 29. Как получить при вставке сгенерированные ключи? Как это сделать на чистом sql?

[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346)
[[PreparedStatement]]

```java
try (PreparedStatement ps =
con.prepareStatement("INSERT ...", Statement.RETURN_GENERATED_KEYS)) {
	try (ResultSet generatedKeys = ps.getGeneratedKeys()) {}
}
```

---
---
#### 30. Для чего используется конструкция try-with-resources?

[2.3.5. JDBC 0.1. Statement](https://job4j.ru/profile/exercise/55/task-view/345)
[2.3.5. JDBC 0.2. PreparedStatement](https://job4j.ru/profile/exercise/55/task-view/346)
[9 лучших практик для обработки исключений в Java](https://habr.com/ru/post/551992/) (Пункт 1)

Если ресурс реализует интерфейс [[AutoClosable]]

Используется для автоматического закрытия соединения с БД в случае если в блоке try возникнет исключение (Exception)
